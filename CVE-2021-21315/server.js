const si = require('systeminformation');
const express = require('express');
const app = express();
const port = 8080;

const defaultServicesToMonitor = [
    'WindowServer',
    'nginx',
    'apache2',
    'httpd',
    'mysql',
    'ssh-agent',
    'mariadb',
    'postgresql',
    'sshd',
    'redis',
    'mongodb',
    'airportd',
    'mDNSResponder'
];

app.use(express.static('public'));

app.get('/monitor', async (req, res) => {
    const serviceQuery = req.query.service;

    const servicesToMonitor = new Set(defaultServicesToMonitor);
    if (serviceQuery) {
        servicesToMonitor.add(serviceQuery);
    }

    try {
      const statuses = await Promise.all(
        Array.from(servicesToMonitor).map(service => si.services(service))
      );

      const serviceStatuses = statuses.map((serviceData, index) => {
        const service = Array.from(servicesToMonitor)[index];
        if (serviceData.length === 0) {
          return { service: service, status: "not found" };
        }
        return {
          service: service,
          status: serviceData[0].running ? "running" : "stopped",
          pid: serviceData[0].pid || "N/A",
          cpu: serviceData[0].cpu || "N/A",
          mem: serviceData[0].mem || "N/A"
        };
      });

      res.json({
        services: serviceStatuses
      });
    } catch (error) {
      res.status(500).json({
        error: "Failed to retrieve service statuses or invalid service name"
      });
    }
});

app.listen(port, () => console.log(`Server is listening on port: ${port}`));
